{"name":"Live-Armor","tagline":"Building Custom Linux Live Images for Security Sandboxing","body":"# The Live-Armor Guide\r\n## Building Secure Live Images with Debian and Grsecurity\r\n\r\nThis guide explains how to build custom live system images for security\r\nsandboxing using tools from the [Debian](https://www.debian.org)\r\n[Live Systems](http://www.live-systems.org/) project and\r\n[Grsecurity](https://www.grsecurity.net).\r\n\r\nFor concreteness we will focus on building a custom live image for\r\nsandboxing the Firefox web browser (also known as Iceweasel in the Debian\r\nworld).  However, the same tools and procedures will allow you to build any\r\nkind of Debian-based live image you want.\r\n\r\n- [Motivation](#motivation)\r\n- [Prerequisites](#prerequisites)\r\n- [Limitations and Alternatives](#limitations-and-alternatives)\r\n- [Architecture](#architecture)\r\n- [Layer 1: The Host System](#layer-1-the-host-system)\r\n- [Layer 2: The Guest Image](#layer-2-the-guest-image)\r\n- [Layer 3: Firejail](#layer-3-firejail)\r\n- [Layer 4: Firefox/Iceweasel Customization](#layer-4-firefoxiceweasel-customization)\r\n\r\n## Motivation\r\n\r\n### The browser problem\r\n\r\nIf you're alive and technically aware in 2015, you know that Internet,\r\noperating system, and applications software are security disaster areas.\r\nEnd-user systems such as workstations and laptops are especially hard to\r\nprotect against the growing tide of malware, most of it delivered via the\r\nInternet.\r\n\r\nAfter basic security measures have been taken, such as disabling unnecessary\r\noperating system services and firewalling network access, the largest attack\r\nsurface on a typical end-user system today is the web browser.  Popular\r\nbrowsers are large and complex pieces of software, invariably written in\r\n[unsafe](https://en.wikipedia.org/wiki/Memory_safety) languages for\r\nperformance (although this may slowly be\r\n[changing](https://github.com/servo/servo)).\r\n[Critical](https://www.mozilla.org/en-US/security/advisories/)\r\n[vulnerabilities](http://www.cvedetails.com/vulnerability-list/vendor_id-1224/product_id-15031/opec-1/Google-Chrome.html)\r\nare discovered in popular browsers every month, any one of which can allow a\r\nremote attacker to take complete control over the computer running the\r\nbrowser.  While this problem is now well known and recognized by browser\r\nvendors and efforts are being made to improve the status quo, building a\r\nsecure browser has turned out to be a long and difficult road.  Meanwhile,\r\nusers are left adrift and vulnerable, and even the technically skilled have\r\nfew good options for securing web browser installations.\r\n\r\n### Live images\r\n\r\nA *live image* is a complete operating system image file (usually in\r\n[ISO format](https://en.wikipedia.org/wiki/ISO_image)) that can be loaded at\r\nsystem boot time from CD/DVD/USB media and that runs completely from RAM.\r\nNo hard disk or any other form of persistent media is required.  Changes can\r\nbe made normally to the running system, but all changes are lost when the\r\nsystem is powered down or reset. (Some live images support an optional\r\npersistence partition that allows the user to store data that persists\r\nacross restarts.)\r\n\r\nLive images are a powerful tool for\r\n[sandboxing](https://en.wikipedia.org/wiki/Sandbox_(computer_security)).\r\nEven if the live operating system or applications are compromised during\r\nruntime, the next reboot will restore the system to its original clean\r\nstate.  Simply using a live system is no guarantee of security, but it can\r\nmake long-term compromise of a system significantly more difficult,\r\nespecially when combined with other countermeasures as part of a\r\ntop-to-bottom architecture that takes into account each layer from the\r\nlowest (physical setting) through the highest (user applications).\r\n\r\n## Prerequisites\r\n\r\nThis guide assumes you are an experienced systems administrator who is\r\ncomfortable with Debian and with configuring and building the\r\n[Linux kernel](https://www.kernel.org/).\r\n\r\n## Limitations and Alternatives\r\n\r\nThe live image method is a relatively heavyweight approach to browser\r\nsecurity.  Configuring and building a custom live image takes time and\r\nskill, and using one is harder than using a browser directly.  All browser\r\ncustomization must be done as part of live system configuration, which means\r\nthat making even simple persistent changes to the browser require updating\r\nthe live configuration and rebuilding the live image.  This is more work\r\nthan most users are willing to put up with.\r\n\r\nThere are a few alternatives:\r\n\r\n- Use a pre-built live system.  This obviates the need to configure and\r\n  build the live image yourself, and is ideal if you can find such an image\r\n  that you trust and that closely matches your needs.  Unfortunately, few\r\n  such images seem to be available today that are built with security in\r\n  mind.  An exception is [Tails](https://tails.boum.org/), but it may not be\r\n  suitable unless you want to route all data through Tor.\r\n\r\n- Use a [chroot](https://en.wikipedia.org/wiki/Chroot) jail.  Setting up a\r\n  secure chroot environment is a difficult task, and should only be\r\n  attempted if you are fully aware of the security weaknesses of vanilla\r\n  chroot environments and employ kernel hardening measures to guard against\r\n  them, such as the chroot restrictions available in\r\n  [Grsecurity](https://www.grsecurity.net/) kernels.  A chroot jail provides\r\n  a relatively thin barrier between the guest and host environments and does\r\n  not in itself provide the \"clean boot\" property of a live image.\r\n\r\n- Use a [namespace/cgroups](https://en.wikipedia.org/wiki/Cgroups) jail.\r\n  Newer Linux kernels provide a range of other features that can be used to\r\n  create container or jail environments.  As with chroot, such environments\r\n  are difficult to configure securely, although tools such as\r\n  [Firejail](https://l3net.wordpress.com/projects/firejail/) can make this\r\n  easier.  And as with chroot jails, programs running in a namespace jail\r\n  can still make system calls directly into the host kernel, and thus are in\r\n  a position to exploit kernel-level security flaws.\r\n\r\n- Use a kernel security framework like\r\n  [AppArmor](https://en.wikipedia.org/wiki/AppArmor),\r\n  [SELinux](https://en.wikipedia.org/wiki/SELinux), or Grsecurity\r\n  [RBAC](https://en.wikibooks.org/wiki/Grsecurity/The_RBAC_System) to\r\n  restrict the areas of the system that the application can access.  These\r\n  frameworks serve mainly to prevent a compromised program from affecting\r\n  the rest of the system.  They are best used along with other exploit\r\n  prevention and sandboxing measures.\r\n\r\n## Architecture\r\n\r\nIn this guide we will assume a four-layer architecture that comprises:\r\n\r\n1. A host system, such as a workstation or laptop\r\n1. A guest live system, running as a virtual machine on the host system\r\n1. A container jail environment, running inside the guest system\r\n1. A Firefox/Iceweasel browser, running inside the jail\r\n\r\nWe could consider variations, such as booting and running the live image on\r\nbare metal.  In fact, most of this guide concerns setting up the live image\r\nand applies equally well regardless of how and where the live system is run.\r\nOne of the advantages of a live image is that it can be carried around on\r\nbootable read-only media and run from any system you happen to have access\r\nto, provided the image was built with the drivers needed to drive the host\r\nhardware.\r\n\r\nA word on virtual machines.  A virtual machine can never be more secure than\r\nthe host it's running on.  Even if your guest operating system and\r\napplications are completely secure, all is lost if the host has been\r\ncompromised.  The purpose of building a live image sandbox is to protect the\r\nhost from the guest and its applications.  There is no way to protect the\r\nguest from the host.\r\n\r\nRunning applications like web browsers within a virtual machine provides a\r\nrelatively high degree of isolation between them and the host.  If the\r\napplication is compromised, the attacker may gain control over the guest\r\nsystem, but attacking the host from the guest is a difficult task as long as\r\nbasic host security precautions have been taken.  Although guest-to-host\r\nexploits that attack the hypervisor interface are\r\n[possible](https://lwn.net/Articles/619376/), such hypervisor flaws are rare\r\ncompared to browser flaws and the hypervisor attack surface is much smaller.\r\nThe risk can be mitigated further through\r\n[kernel hardening](https://en.wikipedia.org/wiki/PaX) on both the host and\r\nguest systems, and by using a kernel security framework on the host to\r\nrestrict the access of hypervisor processes.\r\n\r\nThe architecture described in this guide is an example of the principle of\r\n[defense in depth](https://en.wikipedia.org/wiki/Defense_in_depth_(computing)).\r\nMultiple independent security layers are employed simultaneously, each\r\nproviding a qualitatively different containment barrier around the\r\nvulnerable application.  These security layers are:\r\n\r\n1. A host system with a kernel hardened using PaX/Grsecurity, and\r\n   restriction of hypervisor processes using Grsecurity Role Based Access\r\n   Control (RBAC)\r\n1. A guest system built as a read-only live image with a PaX kernel\r\n1. A container jail environment inside the guest, created with\r\n   [Firejail](https://l3net.wordpress.com/projects/firejail/)\r\n1. Security-oriented application-level configuration of a Firefox browser,\r\n   including default settings and extensions\r\n\r\n## Layer 1: The Host System\r\n\r\nFor our purposes, the only role of the host system is to provide an\r\nenvironment for building and running a live image.  We will assume that the\r\nhost is a Linux system and that [KVM](http://linux-kvm.org/) will be used to\r\nrun the live image.\r\n\r\n### Step 1.1: Configure PaX/Grsecurity\r\n\r\nThis step is optional, but recommended.  Running a Linux kernel patched with\r\nPaX/Grsecurity on the host provides a significantly better security baseline\r\nthan vanilla Linux.  The Grsecurity RBAC system also provides a way to\r\nrestrict the access privileges of hypervisor (QEMU/KVM) processes and other\r\nprograms running on the host.\r\n\r\nSetting up Grsecurity requires downloading the Linux kernel\r\n[source](https://www.kernel.org/), applying the\r\n[Grsecurity patch](https://www.grsecurity.net/) that matches the kernel\r\nversion, configuring the kernel (including PaX/Grsecurity parameters),\r\nbuilding the kernel, and finally installing and booting it.  Assuming\r\nyou have downloaded the kernel source as a file with a name like\r\n`linux-x.y.z.tar.xz` and the corresponding Grsecurity\r\n[patch](https://www.grsecurity.net/download.php) as `grsecurity.patch`\r\n(the actual patch filename contains version and date information), the\r\nbasic steps are:\r\n\r\n```\r\n$ tar axf linux-x.y.z.tar.xz\r\n$ cd linux-x.y.z\r\n$ patch -p1 < ../grsecurity.patch\r\n$ make nconfig\r\n[edit and save kernel configuration]\r\n$ make deb-pkg\r\n```\r\n\r\nIf all goes well, this will produce a `linux-image` Debian package file\r\nalong with related package files for kernel headers, firmware,\r\netc. according to Debian kernel-packaging conventions.  These `.deb`\r\nfiles can be installed directly with `dpkg -i`. Another way to build\r\nDebian packages from kernel source is to use\r\n[kernel-package](https://packages.debian.org/kernel-package).\r\n\r\nRefer to the\r\n[Grsecurity documentation](https://en.wikibooks.org/wiki/Grsecurity) for\r\ninstructions on applying the Grsecurity patch and configuring the\r\nPaX/Grsecurity kernel settings.  When configuring the kernel, try to\r\neliminate any drivers and features that you don't need on the host system,\r\nand enable other important security options such as\r\n[module signing](https://www.kernel.org/doc/Documentation/module-signing.txt),\r\n[stack protection](https://lwn.net/Articles/584225/), and\r\n[seccomp](https://wiki.mozilla.org/Security/Sandbox/Seccomp).  Consult the\r\nUbuntu\r\n[Kernel Hardening](https://wiki.ubuntu.com/Security/Features#Kernel_Hardening)\r\nfeature checklist for other important kernel security features and\r\nparameters.\r\n\r\n### Step 1.2: Configure the hypervisor\r\n\r\nEnsure QEMU/KVM is installed on the host:\r\n\r\n```\r\n# apt-get install qemu-kvm\r\n```\r\n\r\nFor QEMU/KVM, hypervisor configuration takes the form of passing a set of\r\ncommand-line options to `kvm` (which itself is just a wrapper around\r\n`qemu-system-x86_64`).  Here is an example script that can be used to boot\r\nan image with some useful QEMU options:\r\n\r\n```shell\r\n#!/bin/sh\r\n\r\nexport QEMU_AUDIO_DRV=alsa\r\n\r\nexec /usr/bin/kvm -cpu host -m 2048 -drive file=$1,if=virtio,media=cdrom \\\r\n    -balloon virtio \\\r\n    -usbdevice tablet \\\r\n    -soundhw hda \\\r\n    -vga std \\\r\n    -netdev user,id=network0 -device virtio-net,netdev=network0 \\\r\n    -virtfs local,path=/tmp/guest_share,mount_tag=share,security_model=mapped-xattr\r\n```\r\n\r\nTo use this script, pass the image you wish to boot as an argument.\r\n\r\n* `-cpu host` tells QEMU to emulate the precise CPU that the host uses,\r\n  rather than some different or more generic CPU.  This provides the best\r\n  performance.\r\n* `-m 2048` allocates 2GB of RAM to the guest (the default is 128MB).\r\n* `-drive file=$1,if=virtio,media=cdrom` says to use the filename passed as\r\n  the argument `$1` as the virtual boot drive, to treat it as CDROM media,\r\n  and to represent it as a [Virtio](http://www.linux-kvm.org/page/Virtio)\r\n  device rather than emulating some form of disk hardware.  This requires\r\n  Virtio driver support in the guest kernel.  Use Virtio interfaces and\r\n  drivers whenever possible for best performance and feature support.\r\n* `-balloon virtio` enables\r\n  [balloon](http://www.linux-kvm.org/page/Projects/auto-ballooning) support,\r\n  allowing the guest to dynamically grow and release memory back to the\r\n  host.  This requires memory balloon support in the guest kernel.\r\n* `-usbdevice tablet` is necessary to prevent mismatched host/guest mouse\r\n  pointers when using VNC.\r\n* `-soundhw hda` instructs QEMU to emulate HDA PCI sound hardware.  Combined\r\n  with the `export QEMU_AUDIO_DRV=alsa` line, this should provide working\r\n  guest-to-host sound.  If you don't need sound, you can remove these two\r\n  lines.  This requires HDA sound driver support in the guest kernel.\r\n* `-vga std` enables high-resolution video mode support.\r\n* `-netdev user,id=network0 -device virtio-net,netdev=network0` enables\r\n  basic networking support, placing the guest on a private virtual network\r\n  that can access the Internet via the host.\r\n* `-virtfs local,path=/tmp/guest_share,mount_tag=share,security_model=mapped-xattr`\r\n  sets up a shared directory between the host and the guest so that files\r\n  can easily be moved back and forth.  The directory `/tmp/guest_share` on\r\n  the host is made accessible to the guest using\r\n  [9p](http://www.linux-kvm.org/page/9p_virtio).  This requires 9p Virtio\r\n  support in the guest kernel.\r\n\r\nYou should verify that you can use a script like the above to boot a vanilla\r\nlive ISO image on the host.  Standard Debian\r\n[live images](http://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/)\r\nare available from the [Live Systems project](http://live-systems.org/).\r\n\r\nTo use a VNC display rather than QEMU's default SDL display, you can add an\r\noption like `-vnc 127.0.0.1:0` and use a VNC client to connect to QEMU on\r\nport 5900.\r\n\r\nThere is a newer display technology for QEMU called\r\n[SPICE/QXL](http://www.linux-kvm.org/page/SPICE).  In theory, this should\r\nprovide better graphics capabilities and performance, and also provides a\r\nmechanism for copy/paste clipboard transfer between the guest and host.  In\r\ntesting on a Linux 3.18 host/guest with QEMU 2.1, however, using QXL led to\r\nguest hangs with the QEMU host process consuming 100% CPU when doing even\r\nbasic browsing.  To enable SPICE/QXL you can use options like:\r\n\r\n```\r\n-vga qxl \\\r\n-spice addr=127.0.0.1,port=5910,disable-ticketing,image-compression=off\r\n```\r\n\r\nYou will need a [SPICE client](https://packages.debian.org/spice-client) on\r\nthe host to connect to the guest display.  You will also need to enable QXL\r\nin the guest kernel and install the\r\n[QXL Xorg driver](https://packages.debian.org/xserver-xorg-video-qxl) in the\r\nguest.  For copy/paste clipboard support, you will also need the\r\n[spice-vdagent](https://packages.debian.org/spice-vdagent) package in the\r\nguest.  See the SPICE documentation for details.\r\n\r\nAnother option to consider is `-sandbox on`.  This enables\r\n[seccomp](https://wiki.mozilla.org/Security/Sandbox/Seccomp) sandboxing of\r\nthe QEMU process.  Unfortunately, in testing with Linux 3.18 and QEMU 2.1\r\nthis led to instability of QEMU, so use this option with care.\r\n\r\n### Step 1.3: Secure the Hypervisor\r\n\r\nThe purpose of this step is to lock down the access that the hypervisor\r\nprocess has to the rest of the system.  Apart from read/write access to\r\n`/dev/kvm`, QEMU has no special access requirements and can safely be\r\nprevented from reading, writing, or executing most filesystem paths.\r\nIts network access can also be restricted to whatever is required for\r\nthe applications you run within the VM.\r\n\r\nThe procedure for enforcing access control depends on the security\r\nframework you're using on the host.  Most frameworks have a *learning\r\nmode* that allows you to run an application and exercise its\r\nfunctionality, and that then generates a whitelist policy that permits\r\naccess to only those resources actually used by the application during\r\nthe learning process.  Usually some degree of manual review and tuning\r\nof the generated access policy is needed.  Arriving at a good policy\r\nusually requires several tweaks and iterations.\r\n\r\nFor example, if you're using the Grsecurity RBAC system and QEMU-x86_64,\r\nyou can start with a stub entry in your policy file under the\r\nappropriate user role that looks like this:\r\n\r\n```\r\nsubject /usr/bin/qemu-system-x86_64 lo {\r\n\t/\r\n}\r\n```\r\n\r\nThe `l` flag places the policy for this program in learning mode.  You\r\ncan then use `gradm` as usual to enable RBAC in learning mode, exercise\r\nthe program, and then generate an initial policy.  See the\r\n[RBAC documentation](https://en.wikibooks.org/wiki/Grsecurity/The_RBAC_System)\r\nfor details.\r\n\r\nAlthough Grsecurity RBAC is powerful, it uses a whole-system whitelist\r\nmodel, meaning that using it requires having a policy that covers all\r\nusers and programs on the system.  In spite of its 'full system\r\nlearning' mode, generating a working full-system poilcy is a difficult\r\nand time-consuming exercise, especially for desktop-oriented systems and\r\nthose that depend on invasive multi-function services such as systemd.\r\nA far simpler, though less comprehensive, alternative is\r\n[AppArmor](https://en.wikipedia.org/wiki/AppArmor), which only restricts\r\nprograms that have policies defined and has no concept of users or\r\nroles.\r\n\r\n## Layer 2: The Guest Image\r\n\r\nNow that the host system has been prepared and QEMU is working, we are\r\nready to configure and build the live image.\r\n\r\n### Step 2.1: Configuring and Building the Guest Kernel\r\n\r\nFollow the same procedure used to configure and build the\r\n[host kernel](#step-11-configure-paxgrsecurity).  When configuring the\r\nguest kernel, note the following points:\r\n\r\n- Remove all hardware drivers except for devices that QEMU can emulate\r\n  and that you require.  For example, if you want sound support in the\r\n  VM, configure the guest kernel to support Intel PCI HDAudio and start\r\n  QEMU with the sound options given above.  You do not need\r\n  hardware-specific drivers for disk, network, or graphics as these will\r\n  be handled by Virtio &mdash; see below.\r\n- Enable basic virtualization options such as:\r\n  * `CONFIG_PARAVIRT`\r\n  * `CONFIG_HYPERVISOR_GUEST`\r\n  * `CONFIG_KVM_GUEST`\r\n- Many core devices such as block and network devices have optimized\r\n  *Virtio* drivers designed specifically for virtual machines.  Whenever\r\n  possible, use a Virtio driver instead of a hardware driver for a\r\n  device that QEMU will have to emulate.  Ensure the following options\r\n  are enabled:\r\n  * `CONFIG_VIRTIO_PCI`\r\n  * `CONFIG_VIRTIO_BLK`\r\n  * `CONFIG_VIRTIO_NET`\r\n  * `CONFIG_HW_RANDOM_VIRTIO`\r\n  * `CONFIG_VIRTIO_BALLOON`\r\n- Enable virtualized graphics options:\r\n  * `CONFIG_DRM_CIRRUS_QEMU`\r\n  * `CONFIG_DRM_QXL`\r\n  * `CONFIG_DRM_BOCHS`\r\n- Enable OverlayFS support.  This is **required** for a working live\r\n  image:\r\n  * `CONFIG_OVERLAY_FS`\r\n- If you want to be able to share host directories with the guest to\r\n  easily move files back and forth, enable 9p support:\r\n  * `CONFIG_NET_9P`\r\n  * `CONFIG_NET_9P_VIRTIO`\r\n  * `CONFIG_9P_FS`\r\n\r\n### Step 2.2: Installing the Live-Build Tools on the Host\r\n\r\nThe only package you need to build live images is\r\n[live-build](https://packages.debian.org/live-build).  Several other\r\npackages such as [live-boot](https://packages.debian.org/live-boot) and\r\n[live-config](https://packages.debian.org/live-config) will be installed\r\nautomatically into the live image during the build process.  Full\r\ndocumentation on these packages is available from the\r\n[Live Systems project](http://live-systems.org/).\r\n\r\nTo get started with `live-build`, create a directory that will be used\r\nto store your live image configuration and build data (it should have at\r\nleast 1 GB of free space available), and then run `lb config` to create\r\na default live image configuration:\r\n\r\n```\r\n$ mkdir my_live_image\r\n$ cd my_live_image\r\n$ lb config\r\n[2015-03-02 14:41:16] lb config \r\nP: Creating config tree for a debian/jessie/amd64 system\r\nP: Symlinking hooks...\r\n```\r\n\r\nThis creates a configuration directory tree that live-build uses to\r\ndetermine how to build the live image.  If you don't make any changes to\r\nthis tree, you will end up with a default Debian Live image.  You should\r\ntry to build this default image now to ensure your system is set up\r\ncorrectly:\r\n\r\n```\r\n# lb build 2>&1 | tee build.log\r\n```\r\n\r\nThis command will run for some time and generate a lot of output as it\r\ndownloads packages, builds the system in a chroot environment, and\r\nfinally freezes the chroot tree as a\r\n[squashfs](https://en.wikipedia.org/wiki/SquashFS) image and combines it\r\nwith a bootloader and kernel into a bootable binary `.iso` image file.\r\nThis final file will be placed in the directory where you ran `lb\r\nbuild`.\r\n\r\nNote: `lb build` expects to be run as root.  If the build system is\r\nrunning a Grsecurity kernel, you will also have to temporarily\r\ndeactivate some Grsecurity chroot restrictions for the build to succeed,\r\ne.g. with\r\n\r\n```\r\n# echo 0 > /proc/sys/kernel/grsecurity/chroot_caps\r\n# echo 0 > /proc/sys/kernel/grsecurity/chroot_deny_chmod\r\n# echo 0 > /proc/sys/kernel/grsecurity/chroot_deny_mount\r\n# echo 0 > /proc/sys/kernel/grsecurity/chroot_deny_mknod\r\n```\r\n\r\n#### OverlayFS Support\r\n\r\nLive images require some form of\r\n[Union filesystem](https://en.wikipedia.org/wiki/Union_filesystem)\r\nsupport in the guest kernel.  Traditionally the Debian Live System tools\r\nhave used [AuFS](http://aufs.sourceforge.net/) for this.  Unfortunately,\r\nAuFS is an out-of-tree kernel patch that does not play nicely with\r\nGrsecurity.  There is now an in-tree alternative called OverlayFS,\r\nenabled with the `CONFIG_OVERLAY_FS` option in the guest kernel.\r\nHowever, at the time of writing, the Debian `live-boot` package does not\r\nproperly support OverlayFS.  Debian\r\n[bug 773881](https://bugs.debian.org/773881) has been opened for this.\r\nIn the bug comments, a link is provided to a Git repository and branch\r\nthat contains a patched version of live-boot 5.0a1.  Until the official\r\nlive-boot package is updated, a working live-boot that supports\r\nOverlayFS can be built from this branch using `dpkg-buildpackage -b`.\r\nThis will produce the files `live-boot_5.0~a1-1_all.deb` and\r\n`live-boot-initramfs-tools_5.0~a1-1_all.deb`.  These packages should be\r\nplaced in the `config/packages.chroot` directory when configuring the\r\nlive image (see next step) along with version 5.0a1 of live-config,\r\noverriding the default live-boot and live-config packages that would\r\notherwise be installed when building the live image.\r\n\r\n### Step 2.3: Customizing the Live Image\r\n\r\nYou have now used `lb build` to successfully build a default Debian Live\r\nISO image.  This image should be bootable and functional on virtual\r\nmachines or real hardware.  This step covers how to customize the live\r\nimage.\r\n\r\nThe general procedure for making changes to your live image is to modify\r\nsome files in your live configuration tree (the directory where you ran\r\n`lb config`) and then rebuild the live image by running the following\r\nsequence of commands:\r\n\r\n```\r\n# lb clean\r\n# lb config\r\n# lb build\r\n```\r\n\r\nThe `lb clean` command cleans up data from the last build, the `lb\r\nconfig` command updates the live image configuration based on your\r\nchanges, and the `lb build` command actually builds the new image.\r\n\r\nFrom now on, we will assume that you are in your live-build root\r\ndirectory (the directory where you ran `lb config`).  Unless otherwise\r\nnoted, path names will be given relative to this directory.  Most files\r\nand directories used for customization live under the `config/`\r\nsubdirectory.\r\n\r\n#### Overview of Live Image Configuration\r\n\r\nSee the\r\n[Managing a configuration](http://live-systems.org/manual/current/html/live-manual/managing-a-configuration.en.html)\r\nsection of the Live Systems manual for an overview of live image\r\nconfiguration.  Briefly, many basic options, like the target Debian\r\ndistribution and architecture, can be specified as options to `lb\r\nconfig` &mdash; see `lb config --help` and `man lb_config` for details.\r\nPassing options to `lb config` results in modifications to one or more\r\nconfig files located in the `config` subdirectory of your build root.\r\n\r\nAlthough the manual recommends using auto scripts to manage a live image\r\nconfiguration, and for good reason, for simplicity we will make changes\r\nby editing configuration files directly.  These changes will be\r\npreserved on subsequent runs of `lb config`.  Be aware of the caveats of\r\nthis approach as described in the manual and consider using auto scripts\r\ninstead where possible.\r\n\r\n#### Choosing Packages to Install\r\n\r\nThere are two ways to add packages of your choice to your live image.\r\n\r\n##### Adding standard Debian packages\r\n\r\nFor standard Debian packages, create a file with a name ending in\r\n`.list.chroot` in the `config/package-lists` directory.  This file may\r\ncontain a space-separated list of Debian package names.  The named\r\npackages will be retrieved and installed in the chroot during the\r\nbuild/bootstrap process.\r\n\r\nHere is an example package list for a Firefox/Iceweasel image:\r\n\r\n```\r\n$ cat config/package-lists/my.list.chroot\r\ntask-english pm-utils alsa-utils unzip screen curl iceweasel\r\nspice-vdagent fluxbox attr xserver-xorg-video-modesetting\r\nxserver-xorg-video-qxl xserver-xorg-input-evdev xserver-xorg-input-mouse\r\nxinit x11-apps x11-utils x11-xserver-utils rxvt-unicode\r\niceweasel-noscript iceweasel-perspectives iceweasel-refcontrol\r\niceweasel-requestpolicy iceweasel-openinbrowser\r\niceweasel-https-everywhere\r\n```\r\n\r\nRemarks on some of these packages:\r\n\r\n- `attr` is required to set PaX flags on executables, assuming the\r\n  `CONFIG_PAX_XATTR_PAX_FLAGS` kernel option was chosen (recommended).\r\n- `pm-utils` is included for `pm-suspend` which can be used to put the\r\n   system to sleep temporarily.  Sometimes suspending the VM is\r\n   necessary before suspending the host to avoid a frozen VM when the\r\n   host resumes.\r\n- `alsa-utils` is included for basic sound utilities such as\r\n  `alsamixer`.\r\n- `spice-vdagent` is required for copy/paste support via QEMU SPICE,\r\n  discussed earlier.\r\n- `fluxbox` is a lightweight window manager for X.  You can choose any\r\n  other window manager or desktop environment you like.\r\n- The `xserver-xorg` packages select X drivers important for QEMU,\r\n  corresponding to the kernel drivers selected earlier.\r\n- The `iceweasel-*` packages select some useful Firefox extensions that\r\n  happen to be packaged for Debian.  We will look at other ways to\r\n  customize extensions later.\r\n\r\n##### Adding custom packages (including the guest kernel)\r\n\r\nFor packages in the form of `.deb` files that are not part of your\r\nchosen Debian distribution (or that you want to override those in the\r\ndistribution), simply place the files in the `config/packages.chroot`\r\ndirectory.  This is how we provide the guest kernel package we built\r\nearlier.  For example:\r\n\r\n```\r\n$ ls config/packages.chroot\r\nfirejail_0.9.22_1_amd64.deb\r\nlinux-image-3.19.1-grsec1_3.19.1-grsec1-1_amd64.deb\r\nlive-boot_5.0~a1-1_all.deb\r\nlive-boot-initramfs-tools_5.0~a1-1_all.deb\r\nlive-config_5.0~a1-1_all.deb\r\nlive-config-systemd_5.0~a1-1_all.deb\r\n```\r\n\r\n- A [Firejail](https://l3net.wordpress.com/projects/firejail/) package\r\n  is included since it is not yet part of Debian.\r\n- The `linux-image` package is the guest kernel built earlier.\r\n- The `live-boot` packages are included here if they were custom-built\r\n  for OverlayFS support as discussed earlier.\r\n- The `live-config` packages are included here from `experimental` so\r\n  that they match the `live-boot` package versions.\r\n\r\n#### Enabling OverlayFS\r\n\r\nIn order to use OverlayFS, you must edit the file `config/chroot` and\r\nchange\r\n\r\n```\r\nLB_UNION_FILESYSTEM=\"aufs\"\r\n```\r\n\r\nto\r\n\r\n```\r\nLB_UNION_FILESYSTEM=\"overlay\"\r\n```\r\n\r\nYou must also pass a boot parameter to the kernel; see below.\r\n\r\n#### Customizing Kernel Boot Parameters\r\n\r\nIn some cases it is necessary to modify the boot parameters passed to\r\nthe live image kernel.  This is done by modifying the\r\n`LB_BOOTAPPEND_LIVE` option in `config/binary`, which defaults to:\r\n\r\n```\r\nLB_BOOTAPPEND_LIVE=\"boot=live components quiet splash\"\r\n```\r\n\r\nAdding `union=overlay` is **required** for OverlayFS to work:\r\n\r\n```\r\nLB_BOOTAPPEND_LIVE=\"boot=live components quiet splash union=overlay\"\r\n```\r\n\r\nMany runtime live image configuration options can also be passed in the\r\nform of kernel options; see\r\n[man live-config](http://live-systems.org/manpages/4.x/en/html/live-config.7.html)\r\nfor details.\r\n\r\n#### Custom Build Hooks\r\n\r\nExecutable scripts can be placed in the `config/hooks` directory.  Their\r\nfilenames should end with `.hook.chroot`.  These scripts will be run\r\ninside the chroot at the end of the build process, and can be used to\r\nmake changes to the live system before it is frozen into the final\r\nimage.\r\n\r\nFor example, this mechanism can be used to set a root password.  Create\r\nan executable file called `config/hooks/0500-root-password.hook.chroot`\r\ncontaining:\r\n\r\n```shell\r\n#!/bin/sh\r\nusermod -p '$5$GxpbCxvGOmtudd$uL90C.ZOMY6WxI4.x32kTCv38dGiXYUlfWGzCQuHmr3' root\r\n```\r\n\r\nReplace the argument to the `-p` option with the output of `mkpasswd`\r\n(available as part of the [whois](https://packages.debian.org/whois)\r\npackage).  See `man mkpasswd`.\r\n\r\n#### Customizing Live Image Contents\r\n\r\nThe directory `config/includes.chroot` represents the `/` directory of\r\nthe live image filesystem.  Files placed here will be added directly to\r\nthe final live image, replacing existing ones if necessary.\r\n\r\nFor example, to add some custom 'dotfiles' to the live user's home\r\ndirectory, put them in `config/includes.chroot/etc/skel`.  They will\r\nthen end up in `/etc/skel` on the live system and will be copied to the\r\nlive user's home directory when it is created during system startup.\r\n\r\n#### Custom Runtime Hooks\r\n\r\nWhereas build hooks are run during the live image build process, runtime\r\nhooks are run inside the live system during boot.  These hooks are\r\nprocessed by `live-config`.  To add a runtime hook, place an executable\r\nscript in `config/includes.chroot/lib/live/config`.  You should examine\r\nthe default hooks (found in `chroot/lib/live/config` after an `lb\r\nbuild`) or the live-config examples in\r\n`/usr/share/doc/live-config/examples/hooks`.\r\n\r\n### Step 2.4: Specific Customizations\r\n\r\n#### Root Access\r\n\r\nBy default, the live system has one user named `user` with password\r\n`live`.  This user can execute commands as root with `sudo` without\r\nspecifying a password.  A better configuration is to disable sudo and\r\nset a root password.  We saw how to set a root password with a\r\n[Custom Build Hook](#custom-build-hooks) above.  To disable sudo, add\r\n`live-config.noroot` to the kernel boot parameters list\r\n(`LB_BOOTAPPEND_LIVE` in `config/binary`).\r\n\r\n#### PaX Flags and Iceweasel\r\n\r\nIf your guest kernel is configured for PaX and the process memory\r\nprotection feature (`CONFIG_PAX_MPROTECT`) is enabled by default\r\n(recommended), then you will not be able to run Iceweasel without\r\ndisabling memory protection on the `iceweasel` and `plugin-container`\r\nbinaries in `/usr/lib/iceweasel`. (This suboptimal situation arises\r\nbecause Firefox uses JIT compilation for performance, which by its\r\nnature depends on memory regions that are both writable and executable.\r\nIt is possible to compile Firefox without JIT, but this is not done for\r\nthe standard Debian packages.)  This can be done with a\r\n[runtime hook](#custom-runtime-hooks).  For example, you can place an\r\nexecutable script like the following in\r\n`config/includes.chroot/lib/live/config/1200-setattr`:\r\n\r\n```shell\r\n#!/bin/sh\r\n\r\nInit ()\r\n{\r\n\techo -n \" setattr\"\r\n}\r\n\r\nConfig ()\r\n{\r\n\tif [ -f /usr/bin/iceweasel -a -f /usr/bin/setfattr ]; then\r\n\t\tsetfattr -n user.pax.flags -v m /usr/bin/iceweasel\r\n\t\tsetfattr -n user.pax.flags -v m /usr/lib/iceweasel/plugin-container\r\n\tfi\r\n\r\n\t# Creating state file\r\n\ttouch /var/lib/live/config/setattr\r\n}\r\n\r\nInit\r\nConfig\r\n```\r\n\r\nThe `setfattr` method only applies if you selected the\r\n`CONFIG_PAX_XATTR_PAX_FLAGS` option when configuring the guest kernel\r\n(recommended).\r\n\r\n#### Default X Resolution\r\n\r\nThe X resolution can be changed at runtime with `xrandr`.  To change the\r\ndefault resolution, add a\r\n[kernel boot parameter](#customizing-kernel-boot-parameters) like\r\n`live-config.xorg-resolution=1600x1200`.  See\r\n[man live-config](http://live-systems.org/manpages/4.x/en/html/live-config.7.html)\r\nfor details and other options.\r\n\r\n#### Mount a Host Directory with [9p](https://www.kernel.org/doc/Documentation/filesystems/9p.txt)\r\n\r\nIf you configured QEMU to share a host directory via 9p and you included\r\n9p support in your guest kernel, you may want to mount the share\r\nautomatically at boot.  There are many ways to do this, but a quick hack\r\nthat works is to create `config/includes.chroot/etc/rc.local` as an\r\nexecutable shell script and add a line like:\r\n\r\n```\r\nmount -t 9p -o trans=virtio,version=9p2000.L share /mnt\r\n```\r\n\r\nHere `share` is a tag that must match the tag you passed to QEMU via the\r\n`-virtfs` option.\r\n\r\nBe warned that 9p support can exhibit some instabilities.  In testing\r\nwith Linux 3.18 and QEMU 2.1, passing `-sandbox on` caused writes to\r\nfiles over 9p to hang the writing process unrecoverably.  Even without\r\n`-sandbox on`, creation of files over 9p fails with 'Operation not\r\nsupported' (but writing to existing files works).  This can be worked\r\naround by creating the file on the host before trying to write to it\r\nfrom the guest.\r\n\r\nUnrecoverable hangs on the guest may also arise with 9p following\r\nsuspend/resume.  To work around this, unload the 9p kernel modules\r\n(`9p`, `9pnet`, `9pnet_virtio`) using `modprobe -r` before suspend.\r\n\r\n## Layer 3: Firejail\r\n\r\n[Firejail](https://l3net.wordpress.com/projects/firejail/) can\r\noptionally be used to provide another sandbox layer inside the live\r\nsystem.  Firejail runs a program inside a 'container' environment that\r\nprovides kernel namespace and filesystem isolation, as well as\r\n[seccomp](https://wiki.mozilla.org/Security/Sandbox/Seccomp) system call\r\nrestriction.  It is easy to use, supports a number of useful features\r\nand options, and can be used to sandbox any program.\r\n\r\nTo install Firejail, simply download the `.deb` file from the Firejail\r\nproject page (it is not yet available in the Debian repositories) and\r\nplace it in `config/packages.chroot`.\r\n\r\nTo run Firefox/Iceweasel with Firejail, run a command like:\r\n\r\n```\r\n$ firejail --debug iceweasel\r\n```\r\n\r\nThe `--debug` option causes Firejail to produce verbose messages about\r\nwhat it's doing.  Another useful mode is:\r\n\r\n```\r\n$ mkdir ~/sandbox\r\n$ firejail --debug --private=$HOME/sandbox iceweasel\r\n```\r\n\r\nThe `--private` option starts the program in a clean home directory,\r\npreventing access to the user's real home directory.  This is a good way\r\nto start a 'known clean' browser instance.\r\n\r\n### Restricting Filesystem Access\r\n\r\nFirejail uses a blacklist method for restricting access to parts of\r\nfilesystem.  It achieves this by remounting system directories like\r\n`/etc`, `/lib`, and `/usr` as read-only within the container by default,\r\nand fully blocking access to some files and directories by mounting an\r\nempty tmpfs filesystem on top of them.  (Seccomp filtering prevents\r\nthese mounts from being changed within the container with calls to\r\nmount(2).)\r\n\r\nOne omission in the defaults is that they leave the `/dev` directory\r\naccessible.  This can be fixed by, for example, creating a file called\r\n`/etc/firejail/blacklist-dev.inc` with contents like:\r\n```\r\nseccomp mknod\r\n\r\nblacklist /dev/autofs\r\nblacklist /dev/block\r\n...\r\n```\r\n\r\nThe `seccomp mknod` line instructs Firejail to prevent the use of\r\nmknod(2) within the container so that new device files can't be created\r\n(the default in recent versions).  To prevent access to the pre-existing\r\ndevice files in `/dev`, each file or subdirectory of `/dev` must be\r\nlisted on a separate `blacklist` line.  It is safe (and recommended) to\r\nblacklist nearly all device files (other than e.g. `/dev/null` and\r\n`/dev/urandom`) when running Firefox/Iceweasel.\r\n\r\nTo use this file, add a line like\r\n\r\n```\r\ninclude /etc/firejail/blacklist-dev.inc\r\n```\r\n\r\nto `/etc/firejail/firefox.profile` or any other profile in `/etc/firejail`.\r\n\r\n## Layer 4: Firefox/Iceweasel Customization\r\n\r\nIf you are building a Firefox live image, you will want to customize\r\nthings like the browser version, preferences, and extensions.\r\n\r\n### Customizing the Browser Version\r\n\r\nIf you want to install a version of Iceweasel other than the one in your\r\ntarget live image distribution, you will most likely have to resort to\r\n[APT pinning](https://wiki.debian.org/AptPreferences).  For instance,\r\nyou may want to install the latest Firefox release version, which is\r\nusually available in Debian `experimental`.  You can do this by placing\r\na couple of files in the `config/archives` directory.\r\n\r\nThe `experimental.list.chroot` file:\r\n\r\n```\r\ndeb http://ftp.debian.org/debian unstable main\r\ndeb http://ftp.debian.org/debian experimental main\r\n```\r\n\r\nThe `experimental.pref.chroot` file:\r\n\r\n```\r\nPackage: iceweasel\r\nPin: release a=experimental\r\nPin-Priority: 995\r\n\r\nPackage: *\r\nPin: release a=unstable\r\nPin-Priority: 1\r\n```\r\n\r\nThis configuration directs APT to install the `iceweasel` package from\r\n`experimental` and to meet dependencies from `unstable` when they cannot\r\nbe met from the target distribution.\r\n\r\n### Customizing Preferences\r\n\r\nMost preferences are customized by placing files in\r\n`config/includes.chroot/etc/iceweasel/profile`.  When a user first\r\nlaunches Iceweasel, it creates a profile directory in\r\n`~/.mozilla/firefox` based on the contents of `/etc/iceweasel/profile`.\r\n\r\nSome files and directories that are useful for customization:\r\n\r\n- `prefs.js` is the main browser settings and preferences file.\r\n- `bookmarks.html` is the default bookmarks list.\r\n- `extension-data` is a directory that some extensions use to store\r\n  local data.\r\n- `searchplugins` is the directory where different search engines are\r\n  defined.  Each has a single `.xml` file in this directory.\r\n- `search-metadata.json` contains user preferences related to search\r\n  engines.\r\n\r\nYou can easily customize your live image browser by copying files like\r\nthose above from the profile directory of an already-customized Firefox\r\ninstallation into `config/includes.chroot/etc/iceweasel/profile`.\r\n\r\n### Default Preferences for Security and Privacy\r\n\r\nMany of the default Firefox settings are suboptimal for security and\r\nprivacy.  By way of example, this section provides a better set of\r\ndefaults that can be included in your `prefs.js` file.  You should\r\nunderstand what each setting does before using it &mdash; see the\r\nMozilla [documentation](http://kb.mozillazine.org/About:config_entries)\r\nfor details.\r\n\r\n```javascript\r\n/* Don't start finding text when any input is typed */\r\nuser_pref(\"accessibility.typeaheadfind.autostart\", false);\r\n\r\n/* Start with a simple blank page */\r\nuser_pref(\"browser.startup.page\", 1);\r\nuser_pref(\"browser.startup.homepage\", \"about:about\");\r\n\r\n/* Don't send every URL we visit to Google */\r\nuser_pref(\"browser.safebrowsing.enabled\", false);\r\nuser_pref(\"browser.safebrowsing.malware.enabled\", false);\r\n\r\n/* Don't save information entered in web forms and search bars */\r\nuser_pref(\"browser.formfill.enable\", false);\r\n\r\n/* Backspace goes back one page in history */\r\nuser_pref(\"browser.backspace_action\", 0);\r\n\r\n/* Ask where to save downloads */\r\nuser_pref(\"browser.download.useDownloadDir\", false);\r\n\r\n/* When JavaScript wants to open a new window, open a tab instead */\r\nuser_pref(\"browser.link.open_newwindow.restriction\", 0);\r\n\r\n/* Always use Private Browsing Mode */\r\nuser_pref(\"browser.privatebrowsing.autostart\", true);\r\n\r\n/* Disable search suggestions */\r\nuser_pref(\"browser.search.suggest.enabled\", false);\r\n\r\n/* Limit state information saved between sessions */\r\nuser_pref(\"browser.sessionstore.max_tabs_undo\", 5);\r\nuser_pref(\"browser.sessionstore.resume_from_crash\", false);\r\n\r\n/* Turn off tab animations */\r\nuser_pref(\"browser.tabs.animate\", false);\r\n\r\n/* Turn off URL bar funny business */\r\nuser_pref(\"browser.urlbar.autocomplete.enabled\", false);\r\nuser_pref(\"browser.urlbar.trimURLs\", false);\r\n\r\n/* Disallow JavaScript access to potentially dangerous APIs */\r\nuser_pref(\"dom.event.clipboardevents.enabled\", false);\r\nuser_pref(\"dom.battery.enabled\", false);\r\nuser_pref(\"dom.disable_window_open_feature.menubar\", true);\r\nuser_pref(\"dom.disable_window_open_feature.personalbar\", true);\r\nuser_pref(\"dom.disable_window_open_feature.scrollbars\", true);\r\nuser_pref(\"dom.disable_window_open_feature.toolbar\", true);\r\nuser_pref(\"dom.popup_maximum\", 10);\r\nuser_pref(\"dom.storage.default_quota\", 0);\r\n\r\n/* Override User-Agent data to mitigate browser fingerprinting.\r\n * See https://panopticlick.eff.org/\r\n */\r\nuser_pref(\"general.appname.override\", \"Netscape\");\r\nuser_pref(\"general.appversion.override\", \"5.0 (Windows)\");\r\nuser_pref(\"general.buildID.override\", 0);\r\nuser_pref(\"general.oscpu.override\", \"Windows NT 6.2\");\r\nuser_pref(\"general.platform.override\", \"Win32\");\r\nuser_pref(\"general.productSub.override\", \"20100101\");\r\nuser_pref(\"general.useragent.override\", \"Mozilla/5.0 (Windows NT 6.2; rv:36.0) Gecko/20100101 Firefox/36.0\");\r\nuser_pref(\"general.useragent.vendor\", \"\");\r\nuser_pref(\"general.useragent.vendorSub\", \"\");\r\nuser_pref(\"general.warnOnAboutConfig\", false);\r\nuser_pref(\"intl.accept_languages\", \"en-us,en;q=0.5\");\r\n\r\n/* Turn off \"location aware browsing\" */\r\nuser_pref(\"geo.enabled\", false);\r\n\r\n/* Turn off sending non-URL words entered in the URL bar to Google */\r\nuser_pref(\"keyword.enabled\", false);\r\n\r\n/* Turn off spell-checking */\r\nuser_pref(\"layout.spellcheckDefault\", 0);\r\n\r\n/* Disable cookies by default. Use an extension for site-specific\r\n * whitelisting.\r\n */\r\nuser_pref(\"network.cookie.cookieBehavior\", 2);\r\nuser_pref(\"network.cookie.thirdparty.sessionOnly\", true);\r\n\r\n/* Disable IPv6 unless you want to use it. */\r\nuser_pref(\"network.dns.disableIPv6\", true);\r\n\r\n/* Don't \"proactively\" perform DNS resolution */\r\nuser_pref(\"network.dns.disablePrefetch\", true);\r\n\r\n/* Unneeded unless we're using v6 */\r\nuser_pref(\"network.http.fast-fallback-to-IPv4\", false);\r\n\r\n/* Enable pipelining for better performance */\r\nuser_pref(\"network.http.pipelining\", true);\r\nuser_pref(\"network.http.pipelining.maxrequests\", 15);\r\nuser_pref(\"network.http.pipelining.ssl\", true);\r\nuser_pref(\"network.http.proxy.pipelining\", true);\r\nuser_pref(\"network.http.redirection-limit\", 5);\r\n\r\n/* Don't \"proactively\" fetch pages that haven't been requested */\r\nuser_pref(\"network.prefetch-next\", false);\r\n\r\n/* Disable Websockets by default */\r\nuser_pref(\"network.websocket.enabled\", false);\r\n\r\n/* Enable the Do-Not-Track header in HTTP requests */\r\nuser_pref(\"privacy.donottrackheader.enabled\", true);\r\n\r\n/* Clear Private Data when closing the browser */\r\nuser_pref(\"privacy.sanitize.sanitizeOnShutdown\", true);\r\n\r\n/* Disable unsafe RC4 ciphers */\r\nuser_pref(\"security.ssl3.ecdhe_ecdsa_rc4_128_sha\", false);\r\nuser_pref(\"security.ssl3.ecdhe_rsa_rc4_128_sha\", false);\r\nuser_pref(\"security.ssl3.rsa_rc4_128_md5\", false);\r\nuser_pref(\"security.ssl3.rsa_rc4_128_sha\", false);\r\n\r\n/* Disable WebGL by default */\r\nuser_pref(\"webgl.disabled\", true);\r\n```\r\n\r\n### Customizing Extensions\r\n\r\nIf the extension you want to add to your live image is already packaged\r\nfor Debian (for example, `iceweasel-noscript`), you can install it as\r\nyou would any other package by including its name in a file in\r\n`config/package-lists`.\r\n\r\nOtherwise, you will have to place either the packed or unpacked\r\nextension in the following directory:\r\n\r\n```\r\nconfig/includes.chroot/usr/share/mozilla/extensions/{ec8030f7-c20a-464f-9b0e-13a3a9e97384}\r\n```\r\n\r\nHowever, the packed extension (`.xpi`) file or unpacked directory must\r\nhave a specific name.  To find this name, unpack the `install.rdf` file\r\nand inspect it:\r\n\r\n```\r\n$ unzip extension.xpi install.rdf\r\n```\r\n\r\nNear the top of this file there will be an `<id>` or `<em:id>` tag that\r\nlooks similar to\r\n\r\n```\r\n<id>{2b10c1c8-a11f-4bad-fe9c-1c11e82cac42}</id>\r\n```\r\n\r\nor\r\n\r\n```\r\n<em:id>https-everywhere@eff.org</em:id>\r\n```\r\n\r\nTo install an extension as a packed file, place it in the above\r\ndirectory with the name `${XID}.xpi`, where `${XID}` is the content of\r\nthe `<id>` or `<em:id>` tag in the extension's `install.rdf` file.\r\n\r\nTo install an extension as an unpacked directory, create a subdirectory\r\nin the above directory whose name is `${XID}`, then place the unzipped\r\ncontents of the `.xpi` file in that directory.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}